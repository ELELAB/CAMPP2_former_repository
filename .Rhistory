Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
nsets
Kmeans.list
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename)
Kmeans.list
View(Kmeans.list)
View(Kmeans.list)
data.batch
t(data.batch[sample(nrow(data.batch), setsize), ])
setsize
df
df
df
df
df
df
df
df
df
df
setsize
?sample
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
nsets
View(Kmeans.list)
Kmeans.list <- lapply(list.of.dfs[idx], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
PlotKmeans2 <- function(my.data, clus.list, k, my.labels, my.name) {
res.list <- list()
nclus <- unique(unlist(clus.list)) ##doesn't make sense as it generates only "1"
#        nclus <- length(unlist(clus.list))
if (unique(is.na(nclus)) == TRUE) {
cat("\nNo 'best' ks could be determined. There may be little or poor clustering of samples. Ks 1:5 will be returned.\n")
nclus <- k
}
nclus <- sort(nclus)
for (idx in 1:length(nclus)) {
set.seed(10)
#        nth <- detectCores(logical = TRUE)
Kclus <- kmeans(t(my.data), nclus[[idx]])
Clusters <- as.factor(paste0("C",data.frame(Kclus$cluster)$Kclus.cluster))
d<-dist(t(my.data))
fit <- cmdscale(d,eig=TRUE, k=2)
res <-data.frame(names=rownames(fit$points),M1=fit$points[,1],M2=fit$points[,2])
res$Clusters <- Clusters
res.list[[idx]] <- Clusters
Pal <- viridisLite::viridis(length(levels(as.factor(res$Clusters))))
p <- ggplot(res, aes(x=M1, y=M2)) + geom_point(aes(fill = Clusters, colour = Clusters), shape=21, size = 3, stroke = 0.1) + guides(fill = guide_legend(override.aes = list(shape = 22))) + scale_fill_manual(values=Pal) + scale_colour_manual(values=rep("white", length(Pal))) + theme_bw() + geom_text(label = my.labels, colour = "grey50", nudge_x = 0.25, nudge_y = 0.25, size =3) + theme(legend.title=element_blank()) + theme(legend.text = element_text(size = 14), axis.title=element_text(size=14)) + theme(legend.position = "top") + theme(axis.text=element_text(size=14)) + theme(axis.text = element_text(colour = "black"))
ggsave(file=paste0("BestKmeans_C", as.character(nclus[[idx]]), ".pdf"), p, width = 10, height = 8)
}
names(res.list) <- paste0("Clus", nclus)
res.df <- as.data.frame(res.list)
return(res.df)
}
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[idx], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[[idx]], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
View(list.of.dfs)
View(list.of.dfs)
View(Kmeans.list)
View(Kmeans.list)
list.of.dfs
Kmeans.list <- lapply(list.of.dfs[[idx]], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.list <- lapply(list.of.dfs[[1]], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.list <- lapply(list.of.dfs[1], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
Kmeans.list <- lapply(list.of.dfs[2], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
list.of.dfs[2]
idx
nsets
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[2], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[idx], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[idx], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[idx], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[idx], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[idx], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[idx], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[idx], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[idx], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[idx], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[idx], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
View(list.of.dfs)
View(list.of.dfs)
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[[idx]], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[[idx]], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
nsets
#
# if (arg.kmeans == TRUE) {
#
#     if (arg.variant[1] == "seq") {
#         k.data <- arg.data$E
#     } else {
#         k.data <- arg.data
#     }
#
# Number of sample sets to generate
nsets <- 1:ceiling(nrow(counts_batch_cor)/1000) ## is it valid for ms??? if yes, there is only 1 cluster
if(length(nsets) > 10) {
nsets <- 1:10
}
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs[[idx]], function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
if (arg.databatch == TRUE) {
for (idx in 1:length(nsets)) {
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets)) #####WHY??? THIS IS PROBABLY NOT WORKING PROPERLY
Kmeans.Out <- PlotKmeans2(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster; centers
#        either the number of clusters, say k, or a set of initial (distinct) cluster centres. If a number, a random set of (distinct) rows in x is chosen as the initial centres.
#        Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)
} else {
for (idx in 1:length(nsets)) {
df <- t(k.data[sample(nrow(k.data), setsize), ])
list.of.dfs[[idx]] <- df
}
Kmeans.list <- lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets))
#        Kmeans.Out <- PlotKmeans(data.batch, Kmeans.list, nks, labels.kmeans, arg.filename) ####THIS IS NOT WORKING WELL - only 1 cluster
Kmeans.Out <- PlotKmeans2(data.batch, nks, kmeans, labels.kmeans, arg.filename)     }
lapply(list.of.dfs, function(x) EstimateKmeans(x, nsets)
)
Kmeans.list <- lapply(list.of.dfs[[3]], function(x) EstimateKmeans(x, nsets))
list.of.dfs
View(list.of.dfs)
View(list.of.dfs)
EstimateKmeans(list.of.dfs[[1]], nsets)
list.of.dfs[[1]]
nsets
nsets
EstimateKmeans(list.of.dfs[[1]], nsets)
EstimateKmeans(list.of.dfs[[1]], 2)
mclustBIC(df)
BIC <- mclustBIC(df)
mod1 <- Mclust(df, x = BIC)
mod1
df
mclustBIC(df)
Mclust(df, x = BIC)
Ks
Ks <- as.numeric(summary(mod1, parameters = TRUE)$G)
Ks
?kmeans
EstimateKmeans(df,n)
df <- t(k.data[sample(nrow(k.data), setsize), ])
EstimateKmeans(df,n)
df <- t(k.data[sample(nrow(k.data), setsize), ])
EstimateKmeans(df,n)
df <- t(k.data[sample(nrow(k.data), setsize), ])
EstimateKmeans(df,n)
df <- counts_batch_cor
EstimateKmeans(df,n)
EstimateKmeans(df,6)
mclustBIC(df)
BIC <- mclustBIC(df)
mod1 <- Mclust(df, x = BIC)
Ks <- as.numeric(summary(mod1, parameters = TRUE)$G)
cat(paste0("\nCluster run complete - out of ", length(n), " in total..."))
return(Ks)
as.numeric(summary(mod1, parameters = TRUE)$G)
data.batch[sample(nrow(data.batch), setsize), ]
t(data.batch[sample(nrow(data.batch), setsize), ])
[sample(nrow(data.batch), setsize), ]
sample(nrow(data.batch), setsize)
nrow(data.batch)
setsize
sample(nrow(data.batch), setsize)
t(data.batch[sample(nrow(data.batch), setsize), ])
t(data.batch[sample(nrow(data.batch), setsize), ])
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
View(df)
View(k.data)
View(df)
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
df <- t(data.batch[sample(nrow(data.batch), setsize), ])
EstimateKmeans(df, nsets)
counts_batch_cor
View(counts_batch_cor)
