} else {
batches <- SplitList(batches)
acall <- parse(text = paste0("metadata$", as.character(batches[[1]])))
batch <- as.factor(as.character(eval(acall)))
databatch <- TRUE
if (length(batch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[1]])))
}
if (length(batches) > 1 & exists("smetadata")) {
acall <- parse(text = paste0("smetadata$", as.character(batches[[2]])))
sbatch <- as.factor(as.character(eval(acall)))
sdatabatch <- TRUE
if (length(sbatch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[2]])))
}
} else {
sdatabatch <- FALSE
}
}
batches
batches <- "NULL"
if (is.null(batches)){
databatch <- FALSE
sdatabatch <- FALSE
} else {
batches <- SplitList(batches)
acall <- parse(text = paste0("metadata$", as.character(batches[[1]])))
batch <- as.factor(as.character(eval(acall)))
databatch <- TRUE
if (length(batch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[1]])))
}
if (length(batches) > 1 & exists("smetadata")) {
acall <- parse(text = paste0("smetadata$", as.character(batches[[2]])))
sbatch <- as.factor(as.character(eval(acall)))
sdatabatch <- TRUE
if (length(sbatch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[2]])))
}
} else {
sdatabatch <- FALSE
}
}
is.null("")
is.null()
?is.null
batches <- NULL
if (is.null(batches)){
databatch <- FALSE
sdatabatch <- FALSE
} else {
batches <- SplitList(batches)
acall <- parse(text = paste0("metadata$", as.character(batches[[1]])))
batch <- as.factor(as.character(eval(acall)))
databatch <- TRUE
if (length(batch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[1]])))
}
if (length(batches) > 1 & exists("smetadata")) {
acall <- parse(text = paste0("smetadata$", as.character(batches[[2]])))
sbatch <- as.factor(as.character(eval(acall)))
sdatabatch <- TRUE
if (length(sbatch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[2]])))
}
} else {
sdatabatch <- FALSE
}
}
if (is.null(batches)){
databatch <- FALSE
sdatabatch <- FALSE
} else {
batches <- SplitList(batches)
acall <- parse(text = paste0("metadata$", as.character(batches[[1]])))
batch <- as.factor(as.character(eval(acall)))
databatch <- TRUE
if (length(batch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[1]])))
}
if (length(batches) > 1 & exists("smetadata")) {
acall <- parse(text = paste0("smetadata$", as.character(batches[[2]])))
sbatch <- as.factor(as.character(eval(acall)))
sdatabatch <- TRUE
if (length(sbatch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[2]])))
}
} else {
sdatabatch <- FALSE
}
}
if (is.null(metadata)){
stop("\n- Argument metadata (-m) is missing. Metadata provided must be an excel file with minimum two columns named 'ids' (sample names matching those in the object above) and 'group' (diagnosis, tumor stage, ect.).\n")
} else {
metasets <- SplitList(metadata)
metadata <- metasets[1]
metadata <- ReadMyFile(metadata, FALSE)
if (length(metasets) == 2) {
smetadata <- metasets[2]
smetadata <- ReadMyFile(smetadata, FALSE)
}
# IDs and Groups to check user input!
if (is.null(groups)){
stop("Argument -g should be specified as a comma separated list of length two (without quotes and parenthesis!). The first element specifying the name of the column in the metadata file containing sample IDs and the second element specifying the name of the column which contains the groups for the DE/DA analysis.")
} else {
groups <- SplitList(groups)
if (length(groups) < 2) {
stop("Argument -g should be specified as a comma separated list of length two (without quotes and parenthesis!). The first element specifying the name of the column in the metadata file containing sample IDs and the second element specifying the name of the column which contains the groups for the DE/DA analysis.")
}
}
# IDs and Groups to contrast
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# IDs
acall <- parse(text = paste0("metadata$", as.character(groups[[1]])))
ids <- as.character(eval(acall))
if (length(ids) <= 1) {
stop(paste0("No column in metadata file called ",groups[[1]]))
} else {
metadata$ids <- ids
}
# Match Data and Metadata
metadata <- metadata[metadata$ids %in% colnames(data),]
# Groups
acall <- parse(text = paste0("metadata$", as.character(groups[[2]])))
group <- as.factor(as.character(eval(acall)))
if (length(group) <= 1) {
stop(paste0("No column in metadata file called ",groups[[2]]))
}
if (length(groups) == 4) {
# IDs
acall <- parse(text = paste0("smetadata$", as.character(groups[[3]])))
ids <- as.character(eval(acall))
if (length(ids) <= 1) {
stop(paste0("No column in metadata file called ",groups[[3]]))
} else {
smetadata$ids <- ids
}
# Match Data and Metadata
smetadata <- smetadata[smetadata$ids %in% colnames(sdata),]
# Groups
acall <- parse(text = paste0("smetadata$", as.character(groups[[4]])))
sgroup <- as.factor(as.character(eval(acall)))
if (length(sgroup) <= 1) {
stop(paste0("No column in metadata file called ",groups[[4]]))
}
}
# Batches
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if (is.null(batches)){
databatch <- FALSE
sdatabatch <- FALSE
} else {
batches <- SplitList(batches)
acall <- parse(text = paste0("metadata$", as.character(batches[[1]])))
batch <- as.factor(as.character(eval(acall)))
databatch <- TRUE
if (length(batch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[1]])))
}
if (length(batches) > 1 & exists("smetadata")) {
acall <- parse(text = paste0("smetadata$", as.character(batches[[2]])))
sbatch <- as.factor(as.character(eval(acall)))
sdatabatch <- TRUE
if (length(sbatch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[2]])))
}
} else {
sdatabatch <- FALSE
}
}
}
if (is.null(batches)){
databatch <- FALSE
sdatabatch <- FALSE
} else {
batches <- SplitList(batches)
acall <- parse(text = paste0("metadata$", as.character(batches[[1]])))
batch <- as.factor(as.character(eval(acall)))
databatch <- TRUE
if (length(batch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[1]])))
}
if (length(batches) > 1 & exists("smetadata")) {
acall <- parse(text = paste0("smetadata$", as.character(batches[[2]])))
sbatch <- as.factor(as.character(eval(acall)))
sdatabatch <- TRUE
if (length(sbatch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[2]])))
}
} else {
sdatabatch <- FALSE
}
}
if (is.null(metadata)){
stop("\n- Argument metadata (-m) is missing. Metadata provided must be an excel file with minimum two columns named 'ids' (sample names matching those in the object above) and 'group' (diagnosis, tumor stage, ect.).\n")
} else {
metasets <- SplitList(metadata)
metadata <- metasets[1]
metadata <- ReadMyFile(metadata, FALSE)
if (length(metasets) == 2) {
smetadata <- metasets[2]
smetadata <- ReadMyFile(smetadata, FALSE)
}
# IDs and Groups to check user input!
if (is.null(groups)){
stop("Argument -g should be specified as a comma separated list of length two (without quotes and parenthesis!). The first element specifying the name of the column in the metadata file containing sample IDs and the second element specifying the name of the column which contains the groups for the DE/DA analysis.")
} else {
groups <- SplitList(groups)
if (length(groups) < 2) {
stop("Argument -g should be specified as a comma separated list of length two (without quotes and parenthesis!). The first element specifying the name of the column in the metadata file containing sample IDs and the second element specifying the name of the column which contains the groups for the DE/DA analysis.")
}
}
# IDs and Groups to contrast
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# IDs
acall <- parse(text = paste0("metadata$", as.character(groups[[1]])))
ids <- as.character(eval(acall))
if (length(ids) <= 1) {
stop(paste0("No column in metadata file called ",groups[[1]]))
} else {
metadata$ids <- ids
}
# Match Data and Metadata
metadata <- metadata[metadata$ids %in% colnames(data),]
# Groups
acall <- parse(text = paste0("metadata$", as.character(groups[[2]])))
group <- as.factor(as.character(eval(acall)))
if (length(group) <= 1) {
stop(paste0("No column in metadata file called ",groups[[2]]))
}
if (length(groups) == 4) {
# IDs
acall <- parse(text = paste0("smetadata$", as.character(groups[[3]])))
ids <- as.character(eval(acall))
if (length(ids) <= 1) {
stop(paste0("No column in metadata file called ",groups[[3]]))
} else {
smetadata$ids <- ids
}
# Match Data and Metadata
smetadata <- smetadata[smetadata$ids %in% colnames(sdata),]
# Groups
acall <- parse(text = paste0("smetadata$", as.character(groups[[4]])))
sgroup <- as.factor(as.character(eval(acall)))
if (length(sgroup) <= 1) {
stop(paste0("No column in metadata file called ",groups[[4]]))
}
}
# Batches
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if (is.null(batches)){
databatch <- FALSE
sdatabatch <- FALSE
} else {
batches <- SplitList(batches)
acall <- parse(text = paste0("metadata$", as.character(batches[[1]])))
batch <- as.factor(as.character(eval(acall)))
databatch <- TRUE
if (length(batch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[1]])))
}
if (length(batches) > 1 & exists("smetadata")) {
acall <- parse(text = paste0("smetadata$", as.character(batches[[2]])))
sbatch <- as.factor(as.character(eval(acall)))
sdatabatch <- TRUE
if (length(sbatch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[2]])))
}
} else {
sdatabatch <- FALSE
}
}
}
if (is.null(batches)){
databatch <- FALSE
sdatabatch <- FALSE
} else {
batches <- SplitList(batches)
acall <- parse(text = paste0("metadata$", as.character(batches[[1]])))
batch <- as.factor(as.character(eval(acall)))
databatch <- TRUE
if (length(batch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[1]])))
}
if (length(batches) > 1 & exists("smetadata")) {
acall <- parse(text = paste0("smetadata$", as.character(batches[[2]])))
sbatch <- as.factor(as.character(eval(acall)))
sdatabatch <- TRUE
if (length(sbatch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[2]])))
}
} else {
sdatabatch <- FALSE
}
}
if (is.null(metadata)){
stop("\n- Argument metadata (-m) is missing. Metadata provided must be an excel file with minimum two columns named 'ids' (sample names matching those in the object above) and 'group' (diagnosis, tumor stage, ect.).\n")
} else {
metasets <- SplitList(metadata)
metadata <- metasets[1]
metadata <- ReadMyFile(metadata, FALSE)
if (length(metasets) == 2) {
smetadata <- metasets[2]
smetadata <- ReadMyFile(smetadata, FALSE)
}
# IDs and Groups to check user input!
if (is.null(groups)){
stop("Argument -g should be specified as a comma separated list of length two (without quotes and parenthesis!). The first element specifying the name of the column in the metadata file containing sample IDs and the second element specifying the name of the column which contains the groups for the DE/DA analysis.")
} else {
groups <- SplitList(groups)
if (length(groups) < 2) {
stop("Argument -g should be specified as a comma separated list of length two (without quotes and parenthesis!). The first element specifying the name of the column in the metadata file containing sample IDs and the second element specifying the name of the column which contains the groups for the DE/DA analysis.")
}
}
# IDs and Groups to contrast
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# IDs
acall <- parse(text = paste0("metadata$", as.character(groups[[1]])))
ids <- as.character(eval(acall))
if (length(ids) <= 1) {
stop(paste0("No column in metadata file called ",groups[[1]]))
} else {
metadata$ids <- ids
}
# Match Data and Metadata
metadata <- metadata[metadata$ids %in% colnames(data),]
# Groups
acall <- parse(text = paste0("metadata$", as.character(groups[[2]])))
group <- as.factor(as.character(eval(acall)))
if (length(group) <= 1) {
stop(paste0("No column in metadata file called ",groups[[2]]))
}
if (length(groups) == 4) {
# IDs
acall <- parse(text = paste0("smetadata$", as.character(groups[[3]])))
ids <- as.character(eval(acall))
if (length(ids) <= 1) {
stop(paste0("No column in metadata file called ",groups[[3]]))
} else {
smetadata$ids <- ids
}
# Match Data and Metadata
smetadata <- smetadata[smetadata$ids %in% colnames(sdata),]
# Groups
acall <- parse(text = paste0("smetadata$", as.character(groups[[4]])))
sgroup <- as.factor(as.character(eval(acall)))
if (length(sgroup) <= 1) {
stop(paste0("No column in metadata file called ",groups[[4]]))
}
}
# Batches
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if (is.null(batches)){
databatch <- FALSE
sdatabatch <- FALSE
} else {
batches <- SplitList(batches)
acall <- parse(text = paste0("metadata$", as.character(batches[[1]])))
batch <- as.factor(as.character(eval(acall)))
databatch <- TRUE
if (length(batch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[1]])))
}
if (length(batches) > 1 & exists("smetadata")) {
acall <- parse(text = paste0("smetadata$", as.character(batches[[2]])))
sbatch <- as.factor(as.character(eval(acall)))
sdatabatch <- TRUE
if (length(sbatch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[2]])))
}
} else {
sdatabatch <- FALSE
}
}
}
batches
databatch
if (is.null(batches)){
databatch <- FALSE
sdatabatch <- FALSE
} else {
batches <- SplitList(batches)
acall <- parse(text = paste0("metadata$", as.character(batches[[1]])))
batch <- as.factor(as.character(eval(acall)))
databatch <- TRUE
if (length(batch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[1]])))
}
if (length(batches) > 1 & exists("smetadata")) {
acall <- parse(text = paste0("smetadata$", as.character(batches[[2]])))
sbatch <- as.factor(as.character(eval(acall)))
sdatabatch <- TRUE
if (length(sbatch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[2]])))
}
} else {
sdatabatch <- FALSE
}
}
variant
# Variant (datatype)
if (is.null(variant)){
stop("\n- Argument data (-v) is missing. -v specifies type of input data (and sdata, if included).\n")
} else {
variant <- SplitList(variant)
}
# Standardize data
if (is.null(standardize)){
standardize <- c("none", "none")
} else {
standardize <- SplitList(standardize)
}
standadize <- NULL
# Standardize data
if (is.null(standardize)){
standardize <- c("none", "none")
} else {
standardize <- SplitList(standardize)
}
standardize
standardize <- NULL
# Standardize data
if (is.null(standardize)){
standardize <- c("none", "none")
} else {
standardize <- SplitList(standardize)
}
standardize
# Transform
if (is.null(transform)){
transform <- c("none", "none")
} else {
transform <- SplitList(transform)
}
transform
transform <- NULL
if (is.null(batches)){
databatch <- FALSE
sdatabatch <- FALSE
} else {
batches <- SplitList(batches)
acall <- parse(text = paste0("metadata$", as.character(batches[[1]])))
batch <- as.factor(as.character(eval(acall)))
databatch <- TRUE
if (length(batch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[1]])))
}
if (length(batches) > 1 & exists("smetadata")) {
acall <- parse(text = paste0("smetadata$", as.character(batches[[2]])))
sbatch <- as.factor(as.character(eval(acall)))
sdatabatch <- TRUE
if (length(sbatch) <= 1) {
stop(paste0("No column in metadata file called ",as.character(batches[[2]])))
}
} else {
sdatabatch <- FALSE
}
}
# Variant (datatype)
if (is.null(variant)){
stop("\n- Argument data (-v) is missing. -v specifies type of input data (and sdata, if included).\n")
} else {
variant <- SplitList(variant)
}
# Standardize data
if (is.null(standardize)){
standardize <- c("none", "none")
} else {
standardize <- SplitList(standardize)
}
# Transform
if (is.null(transform)){
transform <- c("none", "none")
} else {
transform <- SplitList(transform)
}
transform
getwd()
load("~/opt/campp_bioconducor/CAMPP2/data/BRCA/BRCA_dataPrep.rda")
View(dataPrep)
library(CAMPP2)
getwd()
importCounts("data/test.counts.txt")
importCounts("data/test_counts.txt")
library(CAMPP2)
importCounts("data/test_counts.txt")
importMetadata("data/test_metadata_edited.names.txt")
counts=importCounts("data/test_counts.txt")
rm(counts)
counts=importCounts("data/test_counts.txt")
View(counts)
dataPrep[1:2000,51:100]
test_data2=dataPrep[1:2000,51:100]
View(test_data2)
as.data.frame(test_data2)
test_data2=as.data.frame(test_data2)
write.table(test_data2,file="test_counts2",sep="\t")
getwd()
importMetadata("data/test_metadata_edited.names.txt")
metadata2=importMetadata("data/test_metadata_edited.names.txt")
View(metadata2)
col.names(counts)
colnames(counts)
as.data.frame(colnames(counts))
metadata2$sample=as.data.frame(colnames(counts))
colnames(metadata2)
View(metadata2)
View(metadata2)
colnames(metadata2)
write.table(test_metadata2,file="test_metadata2",sep="\t")
write.table(metadata2,file="test_metadata2",sep="\t")
?rename
